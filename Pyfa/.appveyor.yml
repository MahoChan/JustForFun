image:
  - Visual Studio 2019
  - Ubuntu
  - macos
clone_depth: 1
for:
  -
    matrix:
      only:
        - image: Ubuntu
    environment:
      APPVEYOR_SSH_KEY: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJDW/+oYNGOiPvwuwAL9tc/LQgg58aosIVpMYfepQZ20V+VZnHpZh8IRDA8Jo5xht19p2PksA+hFgqA0kpKtrSkuiWdE8rATQItfk4gf7yB0yGasJGGQZYazy9k/9XtmYkq2HHOOeEqdxvrICddJQ88MLCLT9lJENSUP/YS/yGcjZFXVxE11pTeIcqlCRU+3eYa1v7BeNvXIKNhZoK5orXWrtuH3cy8jrSns/u70aYfJ6B2jA8CnWnDbuvpeQtEY61SQqlKUsSArNa8NAsXj41wr3Ar9gAG9330w7EMTqlutk8HZO35uHI0q5qinUhaQYufPPrVkb2L/N+ZCfu0fnh appveyor"
      APPIMAGE_TOOL: appimagetool-x86_64.AppImage
      PYTHON_APPIMAGE: python3.7.16-cp37-cp37m-manylinux2014_x86_64.AppImage
      DEPLOY_DIR: AppDir/opt/pyfa
#      APPVEYOR_SSH_BLOCK: true
    cache:
      - /home/appveyor/.cache/pip -> requirements.txt
    init:
      - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
    install:
      - sh: git fetch --prune --unshallow # to fix the version dump issues
      - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y update
      - sh: sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python3.7-dev libgtk-3-dev python3-pip libwebkit2gtk-4.0-dev
    before_build:
      - sh: mkdir build && cd build
      - sh: curl -LO https://github.com/AppImage/AppImageKit/releases/download/13/$APPIMAGE_TOOL && chmod +x $APPIMAGE_TOOL
      - sh: curl -LO https://github.com/niess/python-appimage/releases/download/python3.7/$PYTHON_APPIMAGE && chmod +x $PYTHON_APPIMAGE
    build_script:
      # Prepare Python base AppImage, stripping Python metadata
      - sh: ./$PYTHON_APPIMAGE --appimage-extract
      - sh: mv squashfs-root AppDir
      - sh: rm AppDir/python*.desktop
      - sh: rm AppDir/usr/share/applications/*.desktop
      - sh: rm AppDir/usr/share/metainfo/*.appdata.xml
      - sh: unlink AppDir/AppRun
      - sh: mkdir -p $DEPLOY_DIR
      # run install pyfa packages and any other requirements

      - sh: AppDir/usr/bin/python -s -m pip install -U pip setuptools==41.6.0 wheel pathlib2
      - sh: AppDir/usr/bin/python -s -m pip install -r ../requirements.txt
      # Speedup, but causes runtime incompatiblities
      #- sh: AppDir/usr/bin/python -s -m pip install -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-18.04 -r ../requirements.txt

      # Run scripts to prep pyfa data and build database
      - sh: cd ../
      - sh: find locale/ -type f -name "*.po" -exec msgen "{}" -o "{}" \;
      - sh: build/AppDir/usr/bin/python scripts/compile_lang.py
      - sh: build/AppDir/usr/bin/python scripts/dump_crowdin_progress.py
      - sh: build/AppDir/usr/bin/python db_update.py
      - sh: export PYFA_VERSION="$(python3.7 scripts/dump_version.py)"

      # Copy pyfa files to host
      - sh: cp -r eos graphs gui imgs locale service utils eve.db config.py pyfa.py db_update.py README.md LICENSE version.yml ./build/$DEPLOY_DIR
      - sh: find ./build/$DEPLOY_DIR | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf

      # Copy static AppImage files
      - sh: cd dist_assets/linux
      - sh: chmod +x AppRun
      - sh: cp AppRun pyfa.desktop ../../build/AppDir/
      - sh: cp pyfa.desktop ../../build/AppDir/usr/share/applications/
      - sh: cp pyfa.appdata.xml ../../build/AppDir/usr/share/metainfo/
      - sh: chmod +x pyfa && cp pyfa ../../build/AppDir/usr/bin
      - sh: cd ../../

        # Package it all up
      - sh: mkdir dist
      - sh: ./build/$APPIMAGE_TOOL build/AppDir dist/pyfa-$PYFA_VERSION-linux.AppImage
    after_build:
      - sh: ls -la build
    artifacts:
      - path: dist/pyfa-$PYFA_VERSION-linux.AppImage
    deploy:
      tag: $PYFA_VERSION
      release: pyfa $PYFA_VERSION
      description: 'Release description'
      provider: GitHub
      auth_token:
        secure: M94o0xMtzxrvlKpqMcXU2KfbJdd3aYJ3UxWzePUz/pkT1/Ojiis052CiLsLVyzJg
      draft: true
      force_update: false
      # deploy on tag push only
      on:
        APPVEYOR_REPO_TAG: true
  -
    matrix:
      only:
        - image: Visual Studio 2019
    environment:
      PYTHON: "C:\\Python37-x64"
    # Should be enabled only for build process debugging
    # init:
    #   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    cache:
      - C:\users\appveyor\appdata\local\pip\cache\ -> requirements.txt
    install:
      - cmd: git fetch --prune --unshallow # to fix the version dump issues

      - ps: echo("OS version:")
      - ps: "[System.Environment]::OSVersion.Version"

      - ps: echo("Filesystem - root:")
      - ps: "ls \"C:\\\""

      - ps: echo("Filesystem - projects root:")
      - ps: "ls \"C:\\projects\\\""

      - ps: echo("Filesystem - pyfa root:")
      - ps: "ls \"C:\\projects\\$env:APPVEYOR_PROJECT_SLUG\\\""

      - ps: echo("Filesystem - installed SDKs:")
      - ps: "ls \"C:\\Program Files (x86)\\Windows Kits\\\""

      # Prepend newly installed Python to the PATH of this build (this cannot be
      # done from inside the powershell script as it would require to restart
      # the parent CMD process).
      - cmd: "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
      - cmd: "appveyor DownloadFile https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.20.2-v1.16/gettext0.20.2-iconv1.16-shared-64.zip"
      - cmd: "7z x gettext0.20.2-iconv1.16-shared-64.zip -ogettext"
      - cmd: "SET PATH=gettext;%PATH%"

      - cmd: "python --version"
      - cmd: "python -c \"import struct; print(struct.calcsize('P') * 8)\""

      # Upgrade to the latest version of pip to avoid it displaying warnings
      # about it being out of date.
      - cmd: "python -m pip install --upgrade pip"

      # Install the build dependencies of the project. If some dependencies contain
      # compiled extensions and are not provided as pre-built wheel packages,
      # pip will build them from source using the MSVC compiler matching the
      # target Python version and architecture
      - ps: echo("Install pip requirements:")
      # This one is needed to build wxpython 4.0.6 on windows
      - cmd: "python -m pip install pathlib2"
      - cmd: "python -m pip install -r requirements.txt"
      - cmd: "python -m pip install PyInstaller==3.6"
    before_build:
        # directory that will contain the built files
      - ps: $env:PYFA_DIST_DIR = "c:\projects\$env:APPVEYOR_PROJECT_SLUG\dist"
      - ps: $env:PYFA_VERSION = (python ./scripts/dump_version.py)
      - ps: echo("pyfa version $env:PYFA_VERSION")
    build_script:
      - ps: echo("Build pyfa:")
      - ps: Get-ChildItem locale/*.po -Recurse -File| Foreach {msgen $_.fullname -o $_.fullname}
        # Build language files
      - cmd: "python scripts/compile_lang.py"
        # Dump language progress
      - cmd: "python scripts/dump_crowdin_progress.py"
        # Build gamedata DB
      - cmd: "python db_update.py"
      # Build command for PyInstaller
      - cmd: "python -m PyInstaller --noupx --clean --windowed --noconsole -y pyfa.spec"
      # Copy over manifest (See pyfa-org/pyfa#1622)
      - ps: xcopy /y dist_assets\win\pyfa.exe.manifest $env:PYFA_DIST_DIR\pyfa\
      # InnoScript EXE building. This is in a separate script because I don't feel like copying over the logic to AppVeyor script right now...
      - cmd: "python dist_assets/win/dist.py"
      - ps: dir $env:PYFA_DIST_DIR/
    after_build:
      - ps: "ls \"./\""
      - ps: 7z a "pyfa-$env:PYFA_VERSION-win.zip" -r "$env:PYFA_DIST_DIR\pyfa\*"
    artifacts:
      - path: pyfa*-win.zip
      - path: pyfa*-win.exe
    deploy:
      tag: $(pyfa_version)
      release: pyfa $(pyfa_version)
      description: 'Release description'
      provider: GitHub
      auth_token:
        secure: M94o0xMtzxrvlKpqMcXU2KfbJdd3aYJ3UxWzePUz/pkT1/Ojiis052CiLsLVyzJg
      draft: true
      force_update: false
      # deploy on tag push only
      on:
        APPVEYOR_REPO_TAG: true
  -
    matrix:
      only:
        - image: macos
    environment:
      APPVEYOR_SSH_KEY: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJDW/+oYNGOiPvwuwAL9tc/LQgg58aosIVpMYfepQZ20V+VZnHpZh8IRDA8Jo5xht19p2PksA+hFgqA0kpKtrSkuiWdE8rATQItfk4gf7yB0yGasJGGQZYazy9k/9XtmYkq2HHOOeEqdxvrICddJQ88MLCLT9lJENSUP/YS/yGcjZFXVxE11pTeIcqlCRU+3eYa1v7BeNvXIKNhZoK5orXWrtuH3cy8jrSns/u70aYfJ6B2jA8CnWnDbuvpeQtEY61SQqlKUsSArNa8NAsXj41wr3Ar9gAG9330w7EMTqlutk8HZO35uHI0q5qinUhaQYufPPrVkb2L/N+ZCfu0fnh appveyor"
    cache:
      - /Users/appveyor/Library/Caches/pip/ -> requirements.txt
    init:
    #   - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
      - sh: source ~/venv3.7/bin/activate
    install:
      - sh: git fetch --prune --unshallow # to fix the version dump issues
      - sh: bash scripts/osx-setup.sh
    build_script:
      - sh: bash scripts/osx-translations.sh
      - sh: python3 scripts/compile_lang.py
      - sh: python3 scripts/dump_crowdin_progress.py
      - sh: python3 db_update.py
    after_build:
      - sh: export PYFA_VERSION="$(python3 scripts/dump_version.py)"
      - sh: bash scripts/osx-package.sh
#    on_finish:
#      - sh: export APPVEYOR_SSH_BLOCK=true
#      - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
    artifacts:
      - path: dist/pyfa*-mac.zip
    before_deploy:
      - sh: export RELEASE_PKG_FILE=$(ls *.deb)
      - sh: echo "deploying $RELEASE_PKG_FILE to GitHub releases"
    deploy:
      tag: $PYFA_VERSION
      release: pyfa $PYFA_VERSION
      description: 'Release description'
      provider: GitHub
      auth_token:
        secure: M94o0xMtzxrvlKpqMcXU2KfbJdd3aYJ3UxWzePUz/pkT1/Ojiis052CiLsLVyzJg
      draft: true
      force_update: false
      # deploy on tag push only
      on:
        APPVEYOR_REPO_TAG: true
